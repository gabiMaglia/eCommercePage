generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(uuid())
  clerkId       String   @unique
  email         String   @unique
  name          String? 
  phone         String?
  address       Address?
  orders        Order[]  @relation("UserToOrder")
  isBanned      Boolean @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([clerkId])
  @@index([email])
}
model Address {
  id     String @id @default(uuid())
  user   User  @relation(fields: [userId], references: [id])
  userId String @unique

  country String
  state   String
  address String
  zipCode String
  number  String

}
model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  brands     Brand[]     @relation("StoreToBrand")

  products Product[] @relation("StoreToProduct")
  orders   Order[]   @relation("StoreToOrder")

  contactData ContactData?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactData {
  id           String   @id @default(uuid())
  store        Store    @relation(fields: [storeId], references: [id])
  storeId      String   @unique

  phone        String
  email        String
  storeHours   String
  aboutUs      String
  country      String
  state        String
  address      String
  number       String
  facebook     String
  instagram    String
  mercadoLibre String
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  image       String      @default("https://www.kindpng.com/picc/m/459-4595417_category-overview-icon-hd-png-download.png")
  promoImages PromoImage[]    

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Brand {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBrand", fields: [storeId], references: [id])
  name        String
  products    Product[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  value       String
  stock       String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}

model Image {
  id          String      @id @default(uuid())
  productId   String?
  product     Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([productId])
}

model PromoImage {
  id          String      @id @default(uuid())
  productId   String?
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  url         String

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([productId])
  @@index([categoryId])
}

model Stock {
  id          String      @id @default(uuid())
  productId   String      @unique
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int         @default(0)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}

model ProductDescription {
  id                String      @id @default(uuid())
  productId         String      @unique
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  generalDescription String     @default(" ")
  caracteristics     String     @default("[]")

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  brandId     String
  brand       Brand       @relation(fields: [brandId], references: [id])
  orderItems  OrderItem[]
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  productDescription ProductDescription?
  stock       Stock?
  colors      Color[]
  images      Image[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  userId      String
  user        User        @relation("UserToOrder", fields: [userId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([userId])
}

model OrderItem {
  id          String      @id @default(uuid())
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id])
  productId   String
  product     Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
